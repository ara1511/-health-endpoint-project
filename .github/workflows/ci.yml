name: CI - Health Endpoint Tests

# Ejecutar en push y pull requests a main
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Configurar jobs
jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    # Checkout del código
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    # Configurar Node.js
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    # Instalar dependencias
    - name: 📦 Install dependencies
      run: npm ci
    
    # Ejecutar linter (opcional)
    - name: 🧹 Run ESLint
      run: npm run lint --if-present
    
    # Ejecutar tests
    - name: 🧪 Run tests
      run: npm test
    
    # Ejecutar tests con coverage
    - name: 📊 Run tests with coverage
      run: npm run test:coverage
    
    # Subir coverage a Codecov (opcional)
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  health-check:
    name: Health Check Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    # Checkout del código
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    # Configurar Node.js
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    # Instalar dependencias
    - name: 📦 Install dependencies
      run: npm ci
    
    # Iniciar servidor en background
    - name: 🚀 Start server
      run: |
        npm start &
        echo $! > server.pid
      env:
        NODE_ENV: test
    
    # Esperar que el servidor esté listo
    - name: ⏳ Wait for server to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            break
          fi
          echo "⏳ Waiting for server... ($i/30)"
          sleep 2
        done
    
    # Test del endpoint health
    - name: 🏥 Test health endpoint
      run: |
        response=$(curl -s http://localhost:3000/health)
        echo "Response: $response"
        
        # Verificar que contiene "ok"
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
    
    # Test de performance
    - name: ⚡ Performance test
      run: |
        # Test que responda en menos de 100ms
        time=$(curl -o /dev/null -s -w '%{time_total}\n' http://localhost:3000/health)
        echo "Response time: ${time}s"
        
        # Convertir a milisegundos y verificar < 0.1s (100ms)
        if (( $(echo "$time < 0.1" | bc -l) )); then
          echo "✅ Performance test passed! (${time}s)"
        else
          echo "❌ Performance test failed! (${time}s > 0.1s)"
          exit 1
        fi
    
    # Detener servidor
    - name: 🛑 Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔒 Run security audit
      run: npm audit --audit-level moderate